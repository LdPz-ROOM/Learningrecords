react中createRef相当于创建了一个容器，里面存储的是被ref标识的dom对象
不要过度使用ref,存在效率问题
受控组件:页面中所有输入类的dom，随着你的输入把输入的值维护到state就是受控组件
非受控组件:表单中存在输入项，现用现从dom上取
高阶函数:1、若A函数接受的参数是一个函数，那么A就是高阶函数；2、如果一个函数调用的返回值依然是个函数也可以称为高阶函数
函数的柯里化:通过函数调用继续返回函数的方式，实现多次接受参数最后统一处理的函数编码方式
react生命周期旧版本
1、挂载时constructor->componentWillMount->render->componentDidMount
   卸载时：componentWillUnmount一般在这里关闭定时器、取消订阅消息
   更新：setState()->shouldComponentUpdate->componentWillUpdate->render->componentDidUpdate
   forceUpdate()->componentWillUpdate->render->componentDidUpdate
   componentWillReceiveProps->shouldComponentUpdate->componentWillUpdate->render->componentDidUpdate (第一次props不更新)
   componentDidMount常用一般在这个钩子函数中做一些初始化的事，例如开启定时器，发送网络请求，订阅消息
react生命周期新版本
UNSAFE_componentWillMount UNSAFE_componentWillUpdate UNSAFE_componentWillReceiveProps(即将废弃的三个勾子函数)
新增了两个很少用的勾子 getDerivedStateFromProps  getSnapshotBeforeUpdate

getDerivedStateFromProps用法
static getDerivedStateFromProps(props,state){} 必须返回一个状态对象或者null（即state任何时候都取决于props）

getSnapshotBeforeUpdate用法介于render 和 componentDidUpdate之间

虚拟DOM中key的作用：
1、简单的说：key是虚拟DOM对象的标识，在更新显示时key起着极其重要的作用
2、详细的说：当状态的数据发生变化的时候，react会根据新数据生成新的虚拟DOM
           随后react进行新虚拟dom和旧虚拟dom的diff比较，比较规则如下:
           a:旧虚拟DOM找到了与新虚拟DOM相同的key：
             1、若虚拟DOM中内容没变，直接使用之前的真实DOM
             2、若虚拟DOM中内容变了，则新生成真实的DOM，随后替换掉之前的真实DOM
           b：旧虚拟DOM中未找到了与新虚拟DOM相同的key
              根据数据创建新的真实dom，随后渲染到页面
2、用index作为key可能会引发的问题
   1、若对数据进行：逆序添加，逆序删除等破坏顺序操作；会产生没有必要的真实dom的更新，效率低
   2、如果结构中还包含输入内的dom会产生错误的dom更新，界面有问题
   3、如果不存在对数据逆序添加或者删除等破坏顺序的操作，仅渲染列表用index没有问题
   
           
