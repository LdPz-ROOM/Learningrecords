node事件循环
1、和浏览器的事件循环基本相同，都是先去执行同步任务、微任务、宏任务
2、nodejs宏任务和微任务是分类型，有优先级
3、执行同步代码-执行微任务（process.nextTick优先级更高，微任务包括promise async/await process.nextTick）-按照顺序执行6个类型的宏任务
4、宏任务分为以下按照优先级排序
   Timers - setTimeout setInterval
   I/O callbacks - 处理网络、流、tcp的错误回调
   Idle,prepare - 闲置状态（nodejs内部使用)
   poll轮询 - 执行poll中的I/O队列
   check检查 - 存储setImmediate回调
   close callback - 关闭回调如socket.on(‘close’)
   
vdom真的很快吗？
用js对象模拟节点数据 
vdom并不快,js直接操作DOM才是最快的
但“数据驱动视图”要有合适的技术方案，不能全部DOM重建
vdom就是目前最合适的技术方案(并不是因为它快,而是合适)

遍历数组,for 和foreach哪个更快
1、for更快 forEach每次都要创建一个函数来调用，而for不会创建函数
2、函数需要独立的作用域，会有额外的开销

进程和线程
进程，OS进行资源分配和调度的最小单位，有独立的内存空间
线程，OS进行运算调度的最小单位，共享进程内存空间
js是单线程的，但可以开启多进程执行，如WebWorker

nodejs如何开启多进程
1、fork
2、cluster

jsBridge实现原理
1、注册全局API
2、URL scheme

React fiber
组建树转换成链表，可分段渲染
渲染时可以暂停，去执行其它高优任务，空闲时再继续渲染
如何判断空闲？- requestIdleCallback

requestIdleCallback 与 requestAnimationFrame区别
requestAnimationFrame 每次渲染都会执行,高优 - 先执行
requestIdleCallback 空闲时才会执行低优
两者都是宏任务，因为都需等待dom执行完成才执行

vue每个生命周期具体都干了什么？
beforeCreate - 创建一个空白的vue实例
created - Vue实力初始化完成，完成响应式绑定;data method都已经初始化完成，可调用；尚未开始渲染模版
beforeMount - 编译模版，调用render生成vdom，还没有开始dom的渲染
mounted - 完成了dom的渲染，组建创建完成
beforeUpdate - data发生变化之后，准备更新DOM，尚未更新DOM
updated - DOM已经更新完成（不要在updated里面修改data,可能会导致死循环）
actived - 组件被激活
deActived - 离开组件
ajax请求推荐放在mounted里面，created只是理论更快，忽略不计

vue3 Composition API生命周期有何区别
用setup代替了beforeCreate 和 created
使用hooks函数的形式，如mounted改为onMounted()

vue2 vue3 React三者diff算法有何区别
diff算法很早就有
diff算法应用很广泛，例如github的Pull Request 中的代码diff
如果严格的比较两颗树时间复杂度是O(n^3)

Tree Diff优化
只比较同一层级,不跨级比较
tag不同则删除重建（不再比较内部细节）
字节点通过key区分
React中diff仅右移
vue2是双端相互比较，四个指针相互比较，两端往中间移动
vue3最长递增子序列比较

vue React 为何必须使用key
vdom diff算法会根据俄key判断元素是否需要删除
匹配了key，则只移动元素-性能较好
未匹配key，则直接删除重建

vue-router MemoryHistory (abstract)
AbstractHistory 用在非浏览器环境（node），HashHistory 和 HTML5History 用在浏览器环境。

移动端H5300ms延迟
fastclick原理：监听touchend事件（touchstart touchend会先于click触发）
使用自定义DOM事件模拟了click事件
把默认的click事件（300ms触发)禁止掉
meta标签中有width=device-width不会存在这个问题了。(width=device-width代表在移动端做响应式,就没必要做300ms延迟了)

token 和cookie区别
http无状态，每次请求都要携带cookie，以帮助识别身份
服务端也可以向客户端set-cookie，cookie大小4kb
默认有跨域限制：不可以跨域共享、传递cookie
cookie常用于本地存储后面推荐本地存储

现代浏览器开始禁止第三方cookie
和跨域限制不同，这里是：禁止网页引入第三方js设置cookie
打击第三方小广告，保护用户隐私
新增属性sameSite:strict/Lax/none；值可以自己选择

cookie 和 session
cookie用于登录验证，存储用户标识(如userId）
seesion在服务端，存储用户详细信息，和cookie信息一一对应
cookie+session是常用登录验证解决方案

cookie和tokie
cookie是http规范，而token是自定义传递
cookie会被浏览器自动存储,token需要自己存储
token默认没有跨域限制
通常写入到头信息中Authorizaion

JWT（json web Token）
前端发起登录，后段验证成功后，返回一个加密的token
前端自行存储这个token（包含用户信息，加密了）
以后访问服务端接口，都带着这个token，作为用户信息
总结:cookie是http标准；跨域限制；配合session使用；token：无标准；无跨域限制；用于JWT

session 和 JWT哪个更好？
session优点:原理简单，易于学习；用户信息存在服务端，可以快速封禁某个用户；缺点：占有服务端内存；多进程之间不好同步；默认有跨域限制
jwt优点:不占用服务端内存，多进程多服务器不受影响；没有跨域限制；缺点：用户信息存储在客户端，无法快速封禁某个用户；万一服务端密钥泄露，则用户信息全部丢失；
token体积一般大于cookie，会增加请求的数据量
使用：如果有严格管理用户信息的需求（保密，快速封禁）推荐session
如果没有特殊要求，则使用JWT（创业初期的网站）

如何实现sso
cookie默认不可跨域共享,但有些情况下可设置跨域共享
主域名相同，设置cookie domain 为主域名，即可共享cookie
还有一种OAuth 2.0（比如第三方微信登录）

http协议和UDP协议有什么区别？
http协议在应用层，TCP UDP协议在传输层
严格来说，应该拿TCP 和 UDP 进行比较
TCP:有三次握手和四次挥手，有连接有断开，是一种稳定传输
UDP:无连接无断开，不稳定传输，效率高。适合于视频会议，语音通话

http1.0 1.1 2.0区别
1.0最基础的http协议，只实现了get post方法
1.1增加了缓存策略cache-control etag 等；支持长链接connection:keep-alive，一次TCP连接多次请求；支持断点续传，状态码是206；支持新的方法PUT Delete等
2.0可压缩header，减少体积；多路复用，一次TCP连接中可以多个http请求并行请求



